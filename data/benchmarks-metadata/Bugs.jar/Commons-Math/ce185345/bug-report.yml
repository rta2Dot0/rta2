---
BugID: MATH-326
Summary: getLInfNorm() uses wrong formula in both ArrayRealVector and OpenMapRealVector
  (in different ways)
Description: "the L_infinity norm of a finite dimensional vector is just the max of
  the absolute value of its entries.\n\nThe current implementation in ArrayRealVector
  has a typo:\n\n{code}\n    public double getLInfNorm() {\n        double max = 0;\n
  \       for (double a : data) {\n            max += Math.max(max, Math.abs(a));\n
  \       }\n        return max;\n    }\n{code}\n\nthe += should just be an =.\n\nThere
  is sadly a unit test assuring us that this is the correct behavior (effectively
  a regression-only test, not a test for correctness).\n\nWorse, the implementation
  in OpenMapRealVector is not even positive semi-definite:\n\n{code}   \n    public
  double getLInfNorm() {\n        double max = 0;\n        Iterator iter = entries.iterator();\n
  \       while (iter.hasNext()) {\n            iter.advance();\n            max +=
  iter.value();\n        }\n        return max;\n    }\n{code}\n\nI would suggest
  that this method be moved up to the AbstractRealVector superclass and implemented
  using the sparseIterator():\n\n{code}\n  public double getLInfNorm() {\n    double
  norm = 0;\n    Iterator<Entry> it = sparseIterator();\n    Entry e;\n    while(it.hasNext()
  && (e = it.next()) != null) {\n      norm = Math.max(norm, Math.abs(e.getValue()));\n
  \   }\n    return norm;\n  }\n{code}\n\nUnit tests with negative valued vectors
  would be helpful to check for this kind of thing in the future."
