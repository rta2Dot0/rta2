---
BugID: MATH-1067
Summary: Stack overflow in Beta.regularizedBeta
Description: "In org.apache.commons.math3.special.Beta.regularizedBeta(double,double,double,double,int),
  the case\n\n } else if (x > (a + 1.0) / (a + b + 2.0)) {\n      ret = 1.0 - regularizedBeta(1.0
  - x, b, a, epsilon, maxIterations);\n} \n\nis prone to infinite recursion: If x
  is approximately the tested value, then 1-x is approximately the tested value in
  the recursion. Thus, due to loss of precision after the subtraction, this condition
  can be true for the recursive call as well.\n\nExample:\ndouble x= Double.longBitsToDouble(4597303555101269224L);\ndouble
  a= Double.longBitsToDouble(4634227472812299606L);\ndouble b = Double.longBitsToDouble(4642050131540049920L);\nSystem.out.println(x
  > (a + 1.0) / (a + b + 2.0));\nSystem.out.println(1-x>(b + 1.0) / (b + a + 2.0));\nSystem.out.println(1-(1-x)>(a
  + 1.0) / (a + b + 2.0));\n\nPossible solution: change the condition to\nx > (a +
  1.0) / (a + b + 2.0) && 1-x<=(b + 1.0) / (b + a + 2.0)"
