---
BugID: MATH-338
Summary: Wrong parameter for first step size guess for Embedded Runge Kutta methods
Description: "In a space application using DOP853 i detected what seems to be a bad
  parameter in the call to the method  initializeStep of class AdaptiveStepsizeIntegrator.\n\nHere,
  DormandPrince853Integrator is a subclass for EmbeddedRungeKuttaIntegrator which
  perform the call to initializeStep at the beginning of its method integrate(...)\n\nThe
  problem comes from the array \"scale\" that is used as a parameter in the call off
  initializeStep(..)\n\nFollowing the theory described by Hairer in his book \"Solving
  Ordinary Differential Equations 1 : Nonstiff Problems\", the scaling should be :\n\nsci
  = Atol i + |y0i| * Rtoli\n\nWhereas EmbeddedRungeKuttaIntegrator uses :  sci = Atoli\n\nNote
  that the Gragg-Bulirsch-Stoer integrator uses the good implementation \"sci = Atol
  i + |y0i| * Rtoli  \" when he performs the call to the same method initializeStep(..)\n\nIn
  the method initializeStep, the error leads to a wrong step size h used to perform
  an  Euler step. Most of the time it is unvisible for the user.\nBut in my space
  application the Euler step with this wrong step size h (much bigger than it should
  be)  makes an exception occur (my satellite hits the ground...)\n\n\nTo fix the
  bug, one should use the same algorithm as in the rescale method in GraggBulirschStoerIntegrator\nFor
  exemple :\n\n final double[] scale= new double[y0.length];;\n          \n          if
  (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length;
  ++i) {\n                final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));\n
  \               scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * yi;\n
  \             }\n            } else {\n              for (int i = 0; i < scale.length;
  ++i) {\n                final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));\n
  \               scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yi;\n
  \             }\n            }\n          \n          hNew = initializeStep(equations,
  forward, getOrder(), scale,\n                           stepStart, y, yDotK[0],
  yTmp, yDotK[1]);\n\n\n\nSorry for the length of this message, looking forward to
  hearing from you soon\n\nVincent Morand\n\n\n\n\n"
