---
BugID: CAMEL-7456
Summary: Camel PropertiesComponent ignores custom parser in Blueprint
Description: "I have implemented a custom PropertiesParser which allows me to use
  system property placeholders in propertyPrefix and propertySuffix.\n\nIn my use
  case the propertyPrefix is defined as \"$\\{container.stage}.\", where container.stage
  is a jvm option defined at container creation. The value is one of dev, test and
  prod.\n\nThis works fine in Java DSL world (SCR bundle), but custom parser is ignored
  in Blueprint. Here is sample of my blueprint xml:\n{code}\n <cm:property-placeholder
  id=\"integration\" persistent-id=\"org.apache.camel.sample.temp\" placeholder-prefix=\"[[\"
  placeholder-suffix=\"]]\">\n    <cm:default-properties>\n        <cm:property name=\"example\"
  value=\"this value is the default\"/>\n        <cm:property name=\"dev.example\"
  value=\"this value is used in development environment\"/>\n        <cm:property
  name=\"test.example\" value=\"this value is used in test environment\"/>\n        <cm:property
  name=\"prod.example\" value=\"this value is used in production environment\"/>\n
  \   </cm:default-properties>\n</cm:property-placeholder>\n\n<bean id=\"parser\"
  class=\"org.apache.camel.sample.MyCustomPropertiesParser\"/>\n\n<!-- Load properties
  for current container stage -->\n<bean id=\"properties\" class=\"org.apache.camel.component.properties.PropertiesComponent\">\n
  \   <property name=\"propertiesParser\" ref=\"parser\"/>\n    <property name=\"propertyPrefix\"
  value=\"${container.stage}.\"/>\n    <property name=\"fallbackToUnaugmentedProperty\"
  value=\"true\"/>\n    <property name=\"location\" value=\"blueprint:integration,classpath:properties/temp.properties\"/></bean>\n\n<camelContext
  id=\"temp\" xmlns=\"http://camel.apache.org/schema/blueprint\">\n    <route id=\"exampleRoute\">\n
  \       <from uri=\"timer:foo?period=5000\"/>\n        <transform>\n            <simple>{{example}}</simple>\n
  \       </transform>\n        <to uri=\"log:something\"/>\n    </route>\n</camelContext>\n{code}\n\nThe
  reason it did not work was because by default, it uses blueprint property resolver
  (useBlueprintPropertyResolver=\"true\") to bridge PropertiesComponent to blueprint
  in order to support looking up property placeholders from the Blueprint Property
  Placeholder Service. Then it always creates a BlueprintPropertiesParser object and
  set it to PropertiesComponent. \n\nThe customer Property Parser I created was only
  set into the BlueprintPropertiesParser object as a delegate Property Parser. Therefore,
  it was always the method parseUri() from the BlueprintPropertiesParser object got
  invoked. The same method from your custom parser was ignored. \n\nFor more detail,
  please take a look at org.apache.camel.blueprint.CamelContextFactoryBean.initPropertyPlaceholder()
  function.\n\nThe only workaround is to add the attribute useBlueprintPropertyResolver=\"false\"
  to <camelContext> element to disable default blueprint property resolver. However,
  I will have to change PropertiesComponent's \"location\" property to remove blueprint
  \"blueprint:integration\" from the comma separated value list:\n{code}\n <property
  name=\"location\" value=\"classpath:properties/temp.properties\"/> \n{code}\nBecause
  once I set it to false, I will no longer be able to lookup from blueprint property
  service."
